apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    crossplane.io/provider: aws
  name: staticwebpages.platform.arco.cv
spec:
  compositeTypeRef:
    apiVersion: platform.arcocv.co/v1alpha1
    kind: Staticwebpage
  patchSets:
  - name: providerConfigRef
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.providerConfigRef.name
      toFieldPath: spec.providerConfigRef.name
  - name: region
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
  - name: deletionPolicy
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.deletionPolicy
      toFieldPath: spec.deletionPolicy
  - name: userTags
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.tags
      toFieldPath: spec.forProvider.tags
      policy:
        mergeOptions:
          appendSlice: true
          keepMapValues: true

  resources:
  - name: cdn-distribution
    base:
      apiVersion: cloudfront.aws.upbound.io/v1beta1
      kind: Distribution
      metadata:
        labels:
          resource: Distribution
      spec:
        forProvider:
          customErrorResponses:
          - errorCachingMinTtl: 10
            errorCode: 403
            responseCode: "200"
            responsePagePath: /
          - errorCachingMinTtl: 10
            errorCode: 404
            responseCode: "200"
            responsePagePath: /
          defaultCacheBehavior:
          - allowedMethods:
            - HEAD
            - GET
            - OPTIONS
            cachedMethods:
            - HEAD
            - GET
            cachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            targetOriginId: s3Origin
            viewerProtocolPolicy: redirect-to-https
          defaultRootObject: index.html
          enabled: true
          origin:
          - originId: s3Origin
          viewerCertificate:
          - cloudFrontDefaultCertificate: false
            minimumProtocolVersion: TLSv1.2_2021
            sslSupportMethod: sni-only
          restrictions:
          - geoRestriction:
            - restrictionType: none
    patches:
    - patchSetName: providerConfigRef
      type: PatchSet
    - patchSetName: region
      type: PatchSet
    - patchSetName: deletionPolicy
      type: PatchSet
    - patchSetName: userTags
      type: PatchSet
    - fromFieldPath: spec.parameters.enabled
      toFieldPath: spec.forProvider.enabled
    - fromFieldPath: spec.parameters.defaultRootObject
      toFieldPath: spec.forProvider.defaultRootObject
    - fromFieldPath: spec.parameters.description
      toFieldPath: spec.forProvider.comment
    - combine:
        strategy: string
        string:
          fmt: '%s.s3.%s.amazonaws.com'
        variables:
        - fromFieldPath: spec.parameters.bucket.name
        - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.origin[0].domainName
      type: CombineFromComposite
    - fromFieldPath: spec.parameters.bucket.path
      toFieldPath: spec.forProvider.origin[0].originPath
    - fromFieldPath: status.atProvider.domainName
      toFieldPath: status.cloudfront.domain
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.arn
      toFieldPath: status.cloudfront.arn
      type: ToCompositeFieldPath
    - fromFieldPath: status.cloudfront.oai
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.origin[0].s3OriginConfig[0].originAccessIdentity
      transforms:
      - string:
          fmt: origin-access-identity/cloudfront/%s
        type: string
    - combine:
        strategy: string
        string:
          fmt: "%s.%s.arcocv.co"
        variables:
        - fromFieldPath: metadata.name
        - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.forProvider.aliases[0]
      type: CombineFromComposite
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.forProvider.viewerCertificate[0].acmCertificateArn
      transforms:
      - map:
          qa: "<acm_here>"
          stage: "<acm_here>"
          prod: "<acm_here>"
        type: map
  - name: cdn-oai
    base:
      apiVersion: cloudfront.aws.upbound.io/v1beta1
      kind: OriginAccessIdentity
      metadata:
        labels:
          resource: OriginAccessIdentity
    patches:
    - patchSetName: providerConfigRef
      type: PatchSet
    - patchSetName: region
      type: PatchSet
    - patchSetName: deletionPolicy
      type: PatchSet
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.comment
    - fromFieldPath: status.atProvider.id
      toFieldPath: status.cloudfront.oai
      type: ToCompositeFieldPath

  - name: s3-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      metadata:
        labels:
          resource: Bucket
      spec:
        forProvider:
          acl: private
          publicAccessBlockConfiguration:
            blockPublicAcls: true
            blockPublicPolicy: true
            ignorePublicAcls: true
            restrictPublicBuckets: true
          serverSideEncryptionConfiguration:
            rules:
            - applyServerSideEncryptionByDefault:
                sseAlgorithm: AES256
    patches:
    - type: PatchSet
      patchSetName: providerConfigRef
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: deletionPolicy
    - type: PatchSet
      patchSetName: userTags
    - fromFieldPath: spec.parameters.bucket.forceDestroy
      toFieldPath: spec.forProvider.forceDestroy
    - fromFieldPath: spec.parameters.bucket.name
      toFieldPath: metadata.name
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.annotations[crossplane.io/external-name]
      toFieldPath: status.s3.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.s3.arn

  - name: s3-blockpublicaccess
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPublicAccessBlock
      metadata:
        labels:
          resource: BucketPublicAccessBlock
      spec:
        forProvider:
          lockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucketSelector:
            matchControllerRef: true
    patches:
    - type: PatchSet
      patchSetName: providerConfigRef
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: deletionPolicy

  - name: s3-serversideencryption
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketServerSideEncryptionConfiguration
      metadata:
        labels:
          resource: BucketServerSideEncryptionConfiguration
      spec:
        forProvider:
          bucketSelector:
            matchControllerRef: true
          rule:
          - applyServerSideEncryptionByDefault:
            - sseAlgorithm: AES256
    patches:
    - type: PatchSet
      patchSetName: providerConfigRef
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: deletionPolicy

  - name: s3-bucketVersioning
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketVersioning
      metadata:
        labels:
          resource: BucketVersioning
      spec:
        forProvider:
          bucketSelector:
            matchControllerRef: true
          versioningConfiguration:
          - status: Enabled
    patches:
    - type: PatchSet
      patchSetName: providerConfigRef
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: deletionPolicy

  - name: s3-bucket-policy
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPolicy
      metadata:
        labels:
          resource: BucketPolicy
      spec:
        forProvider:
          bucketSelector:
            matchControllerRef: true
    patches:
    - type: PatchSet
      patchSetName: providerConfigRef
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: deletionPolicy
    - combine:
        strategy: string
        string:
          fmt: |-
            {
                "Version": "2008-10-17",
                "Id": "PolicyForCloudFrontPrivateContent",
                "Statement": [
                    {
                        "Sid": "AllowAccessForOAI",
                        "Effect": "Allow",
                        "Principal": {
                            "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity %s"
                        },
                        "Action": "s3:GetObject",
                        "Resource": "arn:aws:s3:::%s/*"
                    }
                ]
            }
        variables:
        - fromFieldPath: status.cloudfront.oai
        - fromFieldPath: spec.parameters.bucket.name
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.policy
      type: CombineFromComposite

  - name: cloudflare-dns-record
    base:
      apiVersion: dns.cloudflare.upbound.io/v1alpha1
      kind: Record
      metadata:
        labels:
          cloudflare.upbound.io/require-zone: "true"
      spec:
        forProvider:
          type: CNAME
          ttl: 300
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.environment
      toFieldPath: spec.forProvider.zoneId
      transforms:
      - map:
          qa: "<zone_id_here>"
          stage: "<zone_id_here>"
          prod: "<zone_id_here>"
        type: map
    - fromFieldPath: status.cloudfront.domain
      toFieldPath: spec.forProvider.value
    - fromFieldPath: status.atProvider.hostname
      toFieldPath: status.cloudflare.hostname
      type: ToCompositeFieldPath